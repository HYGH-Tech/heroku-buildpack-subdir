#!/usr/bin/env bash

set -e

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

unset GIT_DIR

function test() {
  dir=$(mktemp -t buildpackXXXXX)
  rm -rf $dir

  subdir=""
  if [[ $1 == *'='* ]]; then
    subdir=$(echo $1 | cut -d"=" -f 1)
    BUILDPACK=$(echo $1 | cut -d"=" -f 2)
  fi

  url=${BUILDPACK%#*}
  branch=${BUILDPACK#*#}

  if [ "$branch" == "$url" ]; then
    branch=""
  fi

  if [ "$url" != "" ]; then
    echo "=====> Downloading Buildpack: $url, branch: $branch, to tmp dir $dir, against source's subdir: $subdir"

    if [[ "$url" =~ \.tgz$ ]] || [[ "$url" =~ \.tgz\? ]]; then
      mkdir -p "$dir"
      curl -s "$url" | tar xvz -C "$dir" >/dev/null 2>&1
    else
      git clone $url $dir >/dev/null 2>&1
      if [ -f "$dir/.gitmodules" ]; then
        echo "=====> Detected git submodules. Initializing..."
        (cd $dir && git submodule update --init --recursive)
      fi
    fi
    cd $dir

    if [ "$branch" != "" ]; then
      git checkout $branch >/dev/null 2>&1
    fi

    # Ensure that these files exist.
    chmod -f +x $dir/bin/{detect,test,test-compile} || true

    framework=$($dir/bin/detect $1/$subdir)

    if [ $? == 0 ]; then
      echo "=====> Detected Framework: $framework"

       if [ -x $dir/bin/test ]; then
         echo "No tests. Skip"
         return
       fi

      # check if the buildpack left behind an environment for subsequent ones
      if [ -e $dir/export ]; then
        source $dir/export
      fi

      $dir/bin/test $1/$subdir $2/services/$subdir $3

      if [ $? != 0 ]; then
        exit 1
      fi
    else
      echo "Couldn't detect any framework for this buildpack. Exiting."
      exit 1
    fi
  fi
}

for BUILDPACK in $(cat $1/.buildpacks); do
  test $BUILDPACK
done
